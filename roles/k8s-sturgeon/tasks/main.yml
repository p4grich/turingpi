---
# tasks file for k8s-sturgeon
- name: Create a k8s namespace sturgeon-testing
  kubernetes.core.k8s:
    name: sturgeon-testing
    api_version: v1
    kind: Namespace
    state: present
  tags: k8s_create_namespace_sturgeon-testing

- name: Create a k8s namespace sturgeon-prod
  k8s:
    name: sturgeon-prod
    api_version: v1
    kind: Namespace
    state: present
  tags: k8s_create_namespace_sturgeon-prod

- name: Create a Service object from an inline definition sturgeon-testing
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: web
        namespace: sturgeon-testing
        labels:
          app: galaxy
          service: web
      spec:
        selector:
          app: galaxy
          service: web
        ports:
          - protocol: TCP
            targetPort: 8000
            name: port-8000-tcp
            port: 8000
  tags: k8s_create_service_object_sturgeon-testing

- name: Create a Service object from an inline definition sturgeon-prod
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: web
        namespace: sturgeon-prod
        labels:
          app: galaxy
          service: web
      spec:
        selector:
          app: galaxy
          service: web
        ports:
          - protocol: TCP
            targetPort: 8000
            name: port-8000-tcp
            port: 8000
  tags: k8s_create_service_object_sturgeon-prod

- name: Download metrics-server manifest to the cluster.
  ansible.builtin.get_url:
    url: https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
    dest: ~/metrics-server.yaml
    mode: '0664'
  tags: ['never', 'k8s_download_metrics-server']

- name: Remove an existing Service object
  kubernetes.core.k8s:
    state: absent
    api_version: v1
    kind: Service
    namespace: testing
    name: web
  tags: ['never', 'k8s_remove_service_object']

- name: Create a Deployment by reading the definition from a local file
  kubernetes.core.k8s:
    state: present
    src: sturgeon-testing/deployment.yml
  tags: ['never', 'k8s_create_deployment_local_file']

- name: >-
    Read definition file from the Ansible controller file system.
    If the definition file has been encrypted with Ansible Vault it will automatically be decrypted.
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'sturgeon-testing/deployment.yml') | from_yaml }}"
  tags: ['never', 'k8s_create_deployment_local_file']

- name: Read definition template file from the Ansible controller file system
  kubernetes.core.k8s:
    state: present
    template: 'sturgeon-testing/deployment.j2'
  tags: ['never', 'k8s_create_deployment_local_file']

- name: Read definition template file from the Ansible controller file system that uses custom start/end strings
  kubernetes.core.k8s:
    state: present
    template:
      path: 'sturgeon-testing/deployment.j2'
      variable_start_string: '[['
      variable_end_string: ']]'
  tags: ['never', 'k8s_create_deployment_local_file']

- name: Read multiple definition template file from the Ansible controller file system
  kubernetes.core.k8s:
    state: present
    template:
      - path: '/testing/deployment_one.j2'
      - path: '/testing/deployment_two.j2'
        variable_start_string: '[['
        variable_end_string: ']]'
  tags: ['never', 'k8s_create_deployment_local_file']

- name: fail on validation errors
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', '/testing/deployment.yml') | from_yaml }}"
    validate:
      fail_on_error: yes
  tags: ['never', 'k8s_create_deployment_local_file']

- name: warn on validation errors, check for unexpected properties
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', '/testing/deployment.yml') | from_yaml }}"
    validate:
      fail_on_error: no
      strict: yes
  tags: ['never', 'k8s_create_deployment_local_file']

# Download and apply manifest
- name: Download metrics-server manifest to the cluster.
  ansible.builtin.get_url:
    url: https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
    dest: ~/metrics-server.yaml
    mode: '0664'
  tags: ['never', 'k8s_download_and_apply_metrics-server_from_remote_site']

- name: Apply metrics-server manifest to the cluster.
  kubernetes.core.k8s:
    state: present
    src: ~/metrics-server.yaml
  tags: ['never', 'k8s_apply_local_file_metrics-server_manifest']

# Wait for a Deployment to pause before continuing
- name: Pause a Deployment.
  kubernetes.core.k8s:
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: example
        namespace: testing
      spec:
        paused: True
    wait: yes
    wait_condition:
      type: Progressing
      status: Unknown
      reason: DeploymentPaused
  tags: ['never', 'k8s_pause_deployment_sturgeon-testing']

# Patch existing namespace : add label
- name: add label to existing namespace
  kubernetes.core.k8s:
    state: patched
    kind: Namespace
    name: patch_namespace
    definition:
      metadata:
        labels:
          support: patch
  tags: k8s_add_patch_lable

# Create object using generateName
- name: create resource using name generated by the server
  kubernetes.core.k8s:
    state: present
    generate_name: pod-
    definition:
      apiVersion: v1
      kind: Pod
      spec:
        containers:
          - name: py
            image: python:3.7-alpine
            imagePullPolicy: IfNotPresent
  tags: ['never', 'k8s_create_resource_name_generatedr_by_server']

# Server side apply
- name: Create configmap using server side apply
  kubernetes.core.k8s:
    namespace: sturgeon-testing
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: sturgeon-testing-configmap
    apply: yes
    server_side_apply:
      field_manager: ansible
  tags: k8s_create_create_configmap_sturgeon-testing






- name: Create a Service object from an inline definition
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: web
        namespace: testing
        labels:
          app: galaxy
          service: web
      spec:
        selector:
          app: galaxy
          service: web
        ports:
        - protocol: TCP
          targetPort: 8000
          name: port-8000-tcp
          port: 8000

- name: Create a Service object by reading the definition from a file
  k8s:
    state: present
    src: /testing/service.yml

- name: Get an existing Service object
  k8s:
    api_version: v1
    kind: Service
    name: web
    namespace: testing
  register: web_service

- name: Get a list of all service objects
  k8s:
    api_version: v1
    kind: ServiceList
    namespace: testing
  register: service_list

- name: Remove an existing Service object
  k8s:
    state: absent
    api_version: v1
    kind: Service
    namespace: testing
    name: web

# Passing the object definition from a file

- name: Create a Deployment by reading the definition from a local file
  k8s:
    state: present
    src: /testing/deployment.yml

- name: Read definition file from the Ansible controller file system
  k8s:
    state: present
    definition: "{{ lookup('file', '/testing/deployment.yml') | from_yaml }}"

- name: Read definition file from the Ansible controller file system after Jinja templating
  k8s:
    state: present
    definition: "{{ lookup('template', '/testing/deployment.yml') | from_yaml }}"


