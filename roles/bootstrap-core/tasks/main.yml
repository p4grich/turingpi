---

# tasks file for bootstrap-core
# template out /boot/user-data so cloud-init can be rerun if needed.
- name: template /boot/user-data
  template:
    src: user-data.j2
    dest: /boot/user-data
    owner: root
    group: root
    mode: 0755
  tags: cloud-init-cfg

# change /boot/config.txt and /boot/cmdline.txt as needed
- name: Copy config.txt to boot
  copy:
    src: config.txt
    dest: /boot/config.txt
    remote_src: no
    owner: root
    mode: "0755"
  tags: 
    - boot-config
    - kernel-tuning

- name: Copy cmdline.txt to boot
  copy:
    src: cmdline.txt
    dest: /boot/cmdline.txt
    remote_src: no
    owner: root
    mode: "0755"
  tags: 
    - boot-cmdline
    - kernel-tuning

# Set hostname from inventory.
- name: "Set a hostname to:"
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"
  tags: hostname

# check for requiered sshkeys.
- name: Set up multiple authorized keys
  ansible.posix.authorized_key:
    user: '{{ ansible_user }}'
    state: present
    key: '{{ item }}'
  with_file:
    - pirate.pub
  tags: sshkeys

- name: Update repositories cache and install "i2c-tools" and "python-smbus" package
  ansible.builtin.apt:
    update_cache: yes
    state: present
    pkg:
     - i2ctools
     - python-smbus
  when: inventory_hostname_short == 'master-01'
  tags: i2c-tools

- name: Remove useless packages from the cache
  ansible.builtin.apt:
    autoclean: yes
  tags:
    - apt-autoclean
    - make-release-deploy

- name: Remove dependencies that are no longer required
  ansible.builtin.apt:
    autoremove: yes
  tags:
    - apt-autoremove
    - make-release-deploy

- name: Run the equivalent of "apt-get clean" as a separate step
  apt:
    clean: yes
  tags:
    - apt-clean
    - make-release-deploy

- name: Run adhawk ip address apply to bootstrap network ifconfig {{ vinet }} {{ adhawkip }} up
  shell: |
    /sbin/ifconfig "{{ vinet }}" "{{ adhawkip }}" up
    exit 0
  tags: [ "never", "add-static-address" ]

- name: Add IP address of all hosts to all hosts
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ item }}$'
    line: "{{ hostvars[item].ansible_host }} {{item}}"
    state: present
  when: hostvars[item].ansible_host is defined
  with_items: "{{ groups.all }}"
  tags: add_hosts

